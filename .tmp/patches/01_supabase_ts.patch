diff --git a/src/lib/supabase.ts b/src/lib/supabase.ts
index 1111111..2222222 100644
--- a/src/lib/supabase.ts
+++ b/src/lib/supabase.ts
@@
 import { createClient } from '@supabase/supabase-js';
 
 const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
 const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;
@@
 export const supabase = supabaseUrl && supabaseAnonKey ? createClient(
   supabaseUrl,
   supabaseAnonKey,
   {
@@
   }
 ) : null;
 
 if (supabase) {
   console.log('‚úÖ Client Supabase cr√©√© avec succ√®s');
 } else {
   console.error('‚ùå Configuration Supabase manquante - v√©rifiez les variables d\'environnement');
 }
 
-// Database service functions - PRODUCTION UNIQUEMENT
+// Database service functions - PRODUCTION UNIQUEMENT
+// üîê IMPORTANT : pas de fallback "d√©mo" en production
+const allowLocalFallback = import.meta.env.MODE !== 'production';
 export const dbService = {
@@
-      if (error) {
+      if (error) {
         console.error('‚ùå Erreur Supabase owners:', error);
-        // Si erreur d'authentification, utiliser les donn√©es locales
-        if (error.code === 'PGRST301' || error.message.includes('JWT')) {
+        // En DEV uniquement : fallback local
+        if (allowLocalFallback && (error.code === 'PGRST301' || /JWT|RLS|permission/i.test(error.message))) {
           console.log('üîÑ Fallback sur donn√©es locales owners');
           const localKey = agencyId ? `demo_owners_${agencyId}` : 'demo_owners';
           const localData = JSON.parse(localStorage.getItem(localKey) || '[]');
           return localData;
         }
         throw error;
       }
@@
-        if (error.code === 'PGRST301' || error.message.includes('JWT')) {
+        if (allowLocalFallback && (error.code === 'PGRST301' || /JWT|RLS|permission/i.test(error.message))) {
           console.log('üîÑ Fallback sur donn√©es locales properties');
           const localKey = agencyId ? `demo_properties_${agencyId}` : 'demo_properties';
           const localData = JSON.parse(localStorage.getItem(localKey) || '[]');
           return localData;
         }
         throw error;
       }
@@
-        if (error.code === 'PGRST301' || error.message.includes('JWT')) {
+        if (allowLocalFallback && (error.code === 'PGRST301' || /JWT|RLS|permission/i.test(error.message))) {
           console.log('üîÑ Fallback sur donn√©es locales contracts');
           const localKey = agencyId ? `demo_contracts_${agencyId}` : 'demo_contracts';
           const localData = JSON.parse(localStorage.getItem(localKey) || '[]');
           return localData;
         }
         throw error;
       }
@@
-    const { error: authError } = await supabase.auth.admin.deleteUser(id);
-    if (authError) console.warn('Erreur suppression auth:', authError);
-    
+    // ‚ö†Ô∏è La suppression dans Auth n√©cessite une cl√© service c√¥t√© serveur.
+    // √Ä faire via une API serverless (Vercel) avec la cl√© service_role (jamais c√¥t√© client).
     const { error } = await supabase.from('users').delete().eq('id', id);
     if (error) throw error;
     return true;
   },
 };
